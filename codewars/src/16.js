// const rest = [124, 48, 268];
// //
// // function createArr(amount) {
// //   const arr = amount;
// //   const tips = [];
// //   const all = [];
// //
// //   for (let i = 0; i < arr.length; i++){
// //       tips[i] = tip(arr[i]);
// //       all[i] = tips[i] + arr[i];
// //   }
// //   return {
// //       tips, all
// //   }
// // };
// //
// // function tip(val) {
// //     switch (val) {
// //         case val <= 50:
// //             return val * 20 / 100;
// //         case val <= 200:
// //             return val * 15 / 100;
// //         default:
// //             return val * 10 / 100;
// //     }
// // };
// //
// // console.log(createArr(rest));
//
// const Vasya = {
//     name: 'Vasil Vasilenko',
//     mass: 100,
//     height: 1.8
// };
// const Petya = {
//     name: 'Petya Petrenko',
//     mass: 90,
//     height: 2
// };

// function setBMI() {
//     this.BMI = this.mass / this.height * this.height;
//     return this.BMI;
// }
//
// function checkWeight (firstName, secondName) {
//     return firstName.BMI > secondName.BMI
//         ? firstName.name
//         : firstName.BMI === secondName.BMI
//             ? 'Same weight'
//             : secondName.name;
// }
//
// Vasya.setBMI = setBMI;
// Petya.setBMI = setBMI;
//
// console.log("Petya", Petya.setBMI());
// console.log("Vasya", Vasya.setBMI());
// console.log("", Vasya);
// console.log("", Petya);
//
// console.log("The biggest weight has: ", checkWeight(Vasya, Petya));

var John = {
    name: 'John Doe',
    bills: [100, 40, 250],
    tips: null,
    finalValues: null,
    calcTipsAndValues: calcTipsAndValues,
    getAverageTip: getAverageTip,
}

var Sarah = {
    name: 'Sarah Doe',
    bills: [80, 20, 210],
    tips: null,
    finalValues: null,
    calcTipsAndValues: calcTipsAndValues,
    getAverageTip: getAverageTip,
}

function calcTipsAndValues() {

    this.tips = this.bills.map(item => {
        if(item <= 50){
            return item*20/100;
        }
        if(item<=200){
            return item*15/100;
        }
        return item*10/100;

    });

    this.finalValues = this.bills.map((item,i)=>{
        return item + this.tips[i];
    })
    // TODO: calc tips and finalValues arrays using this context
    // bill <= 50 -> 20% tip
    // 50 < bill <= 200 -> 15% tip
    // bill > 200 -> 10% tip
}


function getAverageTip() {
    var averageTip = null;
    return (this.tips.reduce((acc, cur) => {
        return acc+cur;
    }, 0)/this.tips.length);
    // TODO: get tips from this context and return averageTip
    // averageTip equals to sum of all tips divided by their amount


}





/**
 * Implement Zoo collection, which consists of different animals generated by constructor function
 */

const Zoo = [
    createAnimal('Elephant', 30, 100),
    createAnimal('Jiraffa', 10, 40),
    createAnimal('Jiraffa', 10, 40),
    createAnimal('Lama', 20, 25),
    createAnimal('Lama', 20, 25),
]

/**
 * createAnimal should return animal object with following keys
 * {
 *  name - name of the animal,
 *  lifespan - lifespan (years),
 *  costPerDay - costPerDay,
 *  lifetimeCost - lifespan * 365 * costPerDay
 * }
 */
function createAnimal(name, lifespan, costPerDay) {
// TODO
    const obj = {
        name,
        lifespan,
        costPerDay,
        lifetimeCost: lifespan * 365 * costPerDay
    };
    return obj;
}


/**
 * getTotalCost should calculate how much will it cost to hold all animals for some period of time (days variable)
 * animals - animals array
 * days - amount of days for calculation
 */
function getTotalCost(animals, days) {
// TODO
    return animals.reduce((sum, cur)=> {
        return sum + cur.costPerDay*days;
    }, 0)
}

/**
 * getMostExpensiveAnimal should return most expensive animal based on their lifetimeCost param
 */
function getMostExpensiveAnimal(animals) {
    let res=0;
    // TODO
    let index = 0;
    animals.forEach(item => {
        if(item > res) {
            res=item;
            index = i
        }
    })
    return animals[index];
}


console.log(getTotalCost(Zoo, 4));
console.log(getMostExpensiveAnimal(Zoo));

/**
 * Implement Zoo collection, which consists of different animals generated by constructor function
 */

const Zoo = [
    createAnimal('Elephant', 30, 100),
    createAnimal('Jiraffa', 10, 40),
    createAnimal('Jiraffa', 10, 40),
    createAnimal('Lama', 20, 25),
    createAnimal('Lama', 20, 25),
]

/**
 * createAnimal should return animal object with following keys
 * {
 *  name - name of the animal,
 *  lifespan - lifespan (years),
 *  costPerDay - costPerDay,
 *  lifetimeCost - lifespan * 365 * costPerDay
 * }
 */
function createAnimal(name, lifespan, costPerDay) {
    // TODO
    const obj = {
        name,
        lifespan,
        costPerDay,
        lifetimeCost: lifespan * 365 * costPerDay
    };
    return obj;
}


/**
 * getTotalCost should calculate how much will it cost to hold all animals for some period of time (days variable)
 * animals - animals array
 * days - amount of days for calculation
 */
function getTotalCost(animals, days) {
    // TODO
    return animals.reduce((sum, cur) => {
        return sum + cur.costPerDay * days;
    }, 0)
}

/**
 * getMostExpensiveAnimal should return most expensive animal based on their lifetimeCost param
 */
function getMostExpensiveAnimal(animals) {
    return animals.reduce((acc, item) => {
        return item.costPerDay > acc.costPerDay ? item : acc;
    });
};


console.log(getTotalCost(Zoo, 4));
console.log(getMostExpensiveAnimal(Zoo));







